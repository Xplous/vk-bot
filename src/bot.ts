import { Telegraf, Markup } from 'telegraf';
import Database from 'better-sqlite3';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const dbPath = path.resolve(__dirname, '../data.db');
console.log('üîß Using DB file:', dbPath);

const db = new Database(dbPath);

const BOT_TOKEN = process.env.BOT_TOKEN;
const GROUP_CHAT_ID = process.env.GROUP_CHAT_ID;
if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    process.exit(1);
}

function initDB() {
    db.prepare(`
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            application_text TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    `).run();

    console.log('‚úÖ SQLite —Ç–∞–±–ª–∏—Ü–∞ applications –≥–æ—Ç–æ–≤–∞');
}

const bot = new Telegraf(BOT_TOKEN);

const waitingForApplication = new Set<number>();
const userLastSubmission = new Map<number, number>();
const SUBMISSION_COOLDOWN = 60 * 1000;

const mainMenu = Markup.keyboard([
    [Markup.button.text('üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')],
]).resize();

bot.use(async (ctx, next) => {
    if (ctx.chat?.type !== 'private') return; // üí¨ –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from?.username || ctx.from?.id}`);
    await next();
});

bot.start((ctx) => {
    ctx.reply(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
        '–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞, —Å–æ–∑–¥–∞—é—â–∞—è IT-—Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –∫–ª—é—á.\n' +
        '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º, –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç.\n\n' +
        'üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?',
        mainMenu
    );
});

// üëâ –†–µ–∂–∏–º –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ - —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ bot.hears –¥–ª—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.hears('üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–∂–∏–º –∑–∞—è–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –Ω–µ–º
    if (waitingForApplication.has(userId)) {
         await ctx.reply('–í—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É.', {
              reply_markup: { force_reply: true } // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º force_reply, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
         });
         return;
     }

    waitingForApplication.add(userId);
    // –î–ª—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ –Ω—É–∂–Ω–æ answerCbQuery()
    await ctx.reply('‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É, –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ—à–µ–Ω–∏–µ:', {
        reply_markup: {
            force_reply: true, // Telegram –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å remove_keyboard: true, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏
        },
    });
});

// Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
bot.on('text', async (ctx, next) => {
    if (ctx.chat.type !== 'private') return next(); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã

    const userId = ctx.from?.id;
    if (!userId) return next();

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if (!waitingForApplication.has(userId)) {
        await ctx.reply('‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.', mainMenu);
        return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É (—Ç–µ–∫—É—â–µ–º—É bot.on('text'))
    next();
});

// üõë –ò–≥–Ω–æ—Ä–∏–º —Ç–µ–∫—Å—Ç –∏–∑ –≥—Ä—É–ø–ø
bot.on('text', async (ctx) => {
    if (ctx.chat.type !== 'private') return;

    const userId = ctx.from?.id;
    if (!userId) return;

    const now = Date.now();
    const last = userLastSubmission.get(userId);

    if (last && now - last < SUBMISSION_COOLDOWN) {
        const secondsLeft = Math.ceil((SUBMISSION_COOLDOWN - (now - last)) / 1000);
        await ctx.reply(`‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${secondsLeft} —Å–µ–∫. –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.`);
        return;
    }

    const text = ctx.message?.text;
    if (!text) return;

    try {
        db.prepare(`
            INSERT INTO applications (user_id, username, application_text)
            VALUES (?, ?, ?)
        `).run(userId, ctx.from?.username || null, text);

        waitingForApplication.delete(userId);
        userLastSubmission.set(userId, now);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∏ —è–≤–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
        await ctx.reply('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!', { reply_markup: mainMenu.reply_markup });

        const applicationMessage = `üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @${ctx.from?.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}:\n\n${text}`;
        try {
            await bot.telegram.sendMessage(GROUP_CHAT_ID as string, applicationMessage);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É:', err);
        }

        const rows = db.prepare('SELECT * FROM applications').all();
        console.log('üìã –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏:', rows);
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SQLite:', e);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

(async () => {
    initDB();
    await bot.launch();
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
