import { Telegraf, Markup } from 'telegraf';
import Database from 'better-sqlite3';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const dbPath = path.resolve(__dirname, '../data.db');
console.log('üîß Using DB file:', dbPath);

const db = new Database(dbPath);

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    process.exit(1);
}

function initDB() {
    db.prepare(`
        CREATE TABLE IF NOT EXISTS applications (
                                                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                                                    user_id INTEGER NOT NULL,
                                                    username TEXT,
                                                    application_text TEXT NOT NULL,
                                                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    `).run();

    console.log('‚úÖ SQLite —Ç–∞–±–ª–∏—Ü–∞ applications –≥–æ—Ç–æ–≤–∞');
}

const bot = new Telegraf(BOT_TOKEN);

const waitingForApplication = new Set<number>();
const userLastSubmission = new Map<number, number>();
const SUBMISSION_COOLDOWN = 60 * 1000;

const mainMenu = Markup.inlineKeyboard([
    Markup.button.callback('üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', 'start_application'),
]);

bot.telegram.setMyCommands([
    { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
    { command: 'apply', description: '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' },
]);

bot.use(async (ctx, next) => {
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from?.username || ctx.from?.id}`);
    await next();
});

bot.start((ctx) => {
    ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
});

bot.command('apply', (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    waitingForApplication.add(userId);
    ctx.reply('üöÄ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≥–æ—Ç–æ–≤–æ–º—É —Ä–µ—à–µ–Ω–∏—é. –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.');
});

bot.action('start_application', (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    waitingForApplication.add(userId);
    ctx.answerCbQuery();
    ctx.editMessageText('üöÄ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≥–æ—Ç–æ–≤–æ–º—É —Ä–µ—à–µ–Ω–∏—é. –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.');
});

bot.on('text', async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    const now = Date.now();
    const last = userLastSubmission.get(userId);

    if (last && now - last < SUBMISSION_COOLDOWN) {
        const secondsLeft = Math.ceil((SUBMISSION_COOLDOWN - (now - last)) / 1000);
        await ctx.reply(`‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${secondsLeft} —Å–µ–∫. –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏.`);
        return;
    }

    if (waitingForApplication.has(userId)) {
        const text = ctx.message?.text;
        if (!text) return;

        try {
            db.prepare(`
                INSERT INTO applications (user_id, username, application_text)
                VALUES (?, ?, ?)
            `).run(userId, ctx.from?.username || null, text);

            waitingForApplication.delete(userId);
            userLastSubmission.set(userId, now);

            await ctx.reply('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ!');

            // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∑–∞—è–≤–∫–∏
            const rows = db.prepare('SELECT * FROM applications').all();
            console.log('üìã –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏:', rows);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ –≤ SQLite:', e);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else {
        await ctx.reply('‚ùóÔ∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /apply –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É".');
    }
});

(async () => {
    initDB();
    await bot.launch();
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
